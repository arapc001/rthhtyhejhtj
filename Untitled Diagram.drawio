<mxfile host="app.diagrams.net" modified="2023-10-12T18:23:46.577Z" agent="5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36 Edg/117.0.2045.60" etag="4lVBVPSoaZPLwXqTaDEH" version="20.5.1" type="github">
  <diagram id="fEMU8CsOK-T5zwvUxTOt" name="Page-1">
    <mxGraphModel dx="4271" dy="3576" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="vgUEoPMxiy3XVfyz-lUC-4" value="regular languages&#xa;	pumping lemma&#xa;		language is not regular if there is any possible string that can be divided into a beginning, middle, and end, and have the middle part repeat infinitely, and not be considered a part of the language&#xa;		Assume L is a regular language, for any string w of length n or greater than n, w can be broken into a beginning substring x, middle substring y, and ending substring z, such that\n$$1. y \\ne \\epsilon$$\n$$2. |xy| \\le n$$3. $$\\forall k \\ge 0, \\textrm{the string } xy^kz \\textrm{ is also in L} $$If there exists a string w of length greater than or equal to n in which any one of those properties is violated, the language is not regular.\n&#xa;Regular expressions&#xa;	* means 0 or more occurances&#xa;	concatenation (two symbols next to one another, possibly separated by parentheses&#xa;	+ means a choice between one or more symbols&#xa;	precedence: *,(),+&#xa;		KCCA&#xa;		star, next ,plus&#xa;	$$R_{ij}^{(k)}$$&#xa;		i = state 1, j = state 2, R^k = transition function to get from i to j without going through any other states other than i and j,k represents the maximum number state that can be used to from i to j.&#xa;	dfa to set of regular expressions, only find the regular expressions ending in final states, if there are multiple ways to go from i to j, make a reg ex for each k that can be used in the transition, starting from the smallest possible k&#xa;	$$R_{ij}^{(0)}$$&#xa;		for any dfa, these are any direct paths from one vertex to another, including from one vertex to itself.\nif there are 5 vertices, R11, R22, R33, R44, R55 = epsilon, and all direct paths between vertices are equal to their transition symbol(s). if a vertex has a loop/arc back to itself given a certain input symbol, it will be epsilon + that symbol&#xa;		 \nr514 = r414 + (r415(r455)*r454) \nk=5 \ni=1 \nj=4 \nr414 = null \nr314 = null \nr214 = null \nr114 = null \ncant work backwards, impossible to go from 1 to 4 without going through 5, so k must be equal or greater than 5 \nr414 = 0 + \ngiven r514 = 110*(110*)* \ni= start \nj = end \nk = max node to get to j \np=k-1 \nrkij = rpij + (rpik(rpkk)*rpkj) \nfind r614 \nk = 6 \ni = 1 \nj - 4 \nr614 = r514 + (r516(r566)*r564) \nfind r 516, 566, r564 \nrkij = rpij + (rpik(rpkk)*rpkj) \nk=5 p=4 i=1 j=6 \nr516 = r416 + (r415(r455)*r456) \nr416= null, cant get from 1 to 6 without k=&gt;5 \nr415 = 1 \nr455 = e + (10*1) \nr456 = 0, can go from 5 to 6, but cant go from 5 to 6 to 5, or 5 to 6 and loop to 6, because they would use a node higher than 4 as an intermediate state \nr516 = 1(10*1)*0 \nrkij = rpij + (rpik(rpkk)*rpkj) \nr566 = r466 + (r465(r455)*r456) \nr466 = e+1 \nr465 = 0 \nr455 = e + (10*1) \nr456 = 0 \nr566 = e+1 + (0(10*1)*0) \nr564 = r464 + (r465(r455)*r454) \nk=5 i = 6 j = 4 p = 4 \nr464 = null \nr465 = 0 \nr455 = e + (10*1) \nr454 = 10* \nr564 = null + (0(e + (10*1))*10*) \nr564 = 0(10*1)*10* \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n &#xa;		r222= r122 + (r122(r122)*r122)\nk=2 i=2 j=2 p=1\nr222 = a+e + ((a+e)(a+e)*(a+e))\nr222 = a + (a(a)*a)\nr11 = e\nr33 = e\nr12 = a+b\nr31 = b\nr23 = b\nr122 = a+e\n\n\n\n\n\n\n\n\n\n" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="460" y="80" width="420" height="490" as="geometry" />
        </mxCell>
        <mxCell id="vgUEoPMxiy3XVfyz-lUC-5" value="Deterministic Finite State Automata&#xa;	finite automata&#xa;		shortened version of finite state automata&#xa;		FA = FSA&#xa;		deterministic&#xa;	state diagram&#xa;		circle = state, line = transition, line with text = input causing transition(input condition), line with text leading to and from a single state = that state when supplied that input will lead back to that state, state that is &quot;final&quot; has double circle&#xa;			transition = movement from one state to another&#xa;				heat causes change of state in matter&#xa;			final = accepted = accepted language&#xa;		questions to ask when analyzing a state diagram&#xa;			what are the possible ways to get to final?&#xa;			what are the possible ways to NOT get to final state?&#xa;			what are the symbols on lines? thats your alphabet&#xa;			notes from analyzing this diagram&#xa;					answer: all strings a,b that do not contain the substring aa&#xa;		questions to ask when creating a state diagram&#xa;			what cases must be satisfied and how do i test them&#xa;			what boundary cases do i need to test for (ex: empty string)&#xa;			start with diagrams you know to be correct, then determine if you can merge start states and final states&#xa;			what set of strings does each state represent, if you dont know what set of strings would lead to a state, consider whther you need it or not&#xa;				ex: given {01,101}∗ \n what do q1, q4, q5 represent?&#xa;					q1 = strings starting with 01 and ending in 01, that may have an extra 0 (note the only symbol leading out is a 1),  so as soon as it hits 1 it moves to next state, s0 {01,101}∗{0} \n &#xa;					q4 = strings starting and ending with 101 that may have an extra 1 ( note the only symbol leading out is a 0), so as soon as it hits 0 it moves to next state, so {01,101}∗{1} &#xa;					q5 = strings starting and ending with 101 that may have an extra 10,&#xa;					the pattern is that each one can have as many repeating characters from previous transitions as they want, as long as they end in 01 or 101&#xa;	deterministic finite automata&#xa;		dfa = dfsa&#xa;		deterministic = can only be in one state at a time &#xa;			state = collection of information remembered by a system&#xa;				state of the union is info about the us at that point in time&#xa;		finite = only a finite number of possible states&#xa;			Q&#xa;		finite automata (FA) definition&#xa;			FA = (Q,Σ,q0,A,δ)&#xa;				Q = finite set of states&#xa;				Σ = finite input alphabet(set of non-empty symbols&#xa;				q0 = initial state, q0 ∈Q ( the initial state is a member of the finite set of states)&#xa;				A = set of accepting states, A ⊆Q (A is a subset of the finite set of states)&#xa;				δ = , the transition function&#xa;					Q x Σ -&gt; Q(each single state multiplied by each single input for each input leads to a state)&#xa;						set multiplication, ex&#xa;							{1,2,3} x {a,b} = {(1,a),(2,a),(3,a),(1,b),(2,b),(3,b)} &#xa;						given Q={q0,q1,q2,0,1,2}\nΣ={0,1}\nδ would be  $$\\begin{array}{ } \n \\\\ &amp; &amp;\\text{Starting State}\n\\\\\n \\hline&amp; &amp; q0 &amp; q1 &amp;q2 &amp; 0 &amp; 1 &amp; 2 \\\\  \\hline \\text{Input} &amp; 0&amp;q1&amp;q2&amp;q2&amp;0&amp;2&amp;1 \\\\ \n &amp;1&amp;1&amp;q2&amp;q2&amp;1&amp;0&amp;2 \\\\  \n\\hline \\end{array} $$&#xa;					set of pairs(functions), {state+input,result),(state+input,result2),....}&#xa;					the function (q0,0),q1) means\nstate q0 when given input 0 will lead to q1&#xa;						the function (0,0),0) means \nstate 0 when given input zero will lead to 0\n &#xa;			5-tuple&#xa;				tuple = finite SEQUENCE of elements&#xa;				5 tuple = sequence of 5 elements&#xa;			same for nondeterministic, only difference is δ &#xa;				for NFA, δ  = Q X Q x Σ -&gt; $$2^Q$$&#xa;			only difference in definitions between deterministic and nondeterministic is that the functions for DFA can only have one function for each input and output pair, while nondeterministic can have more than 1 function per input and output pair&#xa;	nondeterministic finite automata&#xa;		deterministic vs nondeterministic&#xa;			single thread vs multithread&#xa;		nondeterministic = automata can be in multiple states at once&#xa;			like shrodingers cat, the state can either be outcome A or B given a single input" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-580" y="-380" width="420" height="860" as="geometry" />
        </mxCell>
        <mxCell id="vgUEoPMxiy3XVfyz-lUC-6" value="390 quiz guidelines&#xa;	answers should be readable, use notation described in module 1 (typing mathematics in canvas) &#xa;		https://www.cs.odu.edu/~zeil/cs390/f23/Public/texmath/index.html&#xa;			canvas editor&#xa;				superscript/subscript (hit once to enter ss mode then hit again to exit, or click and drag over which text you want to ss)&#xa;			html entitites&#xa;				accessed through &lt;/&gt; button, then type &amp;characterName;&#xa;				Entity	Renders As	meaning\n&amp;alpha;	α\nalpha\n&amp;beta;	β\nbeta\n&amp;gamma;	γ\ngamma\n&amp;delta;	δ\ndelta\n&amp;epsilon;	ϵ\nepsilon, empty string\n&amp;lamda;	λ\nlambda, “special” mark\n&amp;sigma;	σ\nsigma\n&amp;Sigma;	Σ\nupper-case sigma, alphabets\n&amp;ne;	≠\nnot equal to\n&amp;le;	≤\nless than or equal to\n&amp;ge;	≥\ngreater than or equal to\n&amp;rarr;	→\nsimple right arrow\n&amp;rArr;	⇒\nderives, implies\n&amp;and;	∧\nlogical and\n&amp;or;	∨\nlogical or\n&amp;isin;	∈\nis in (set membership)\n&amp;cap;	∩\nintersection\n&amp;cup;	∪\nunion\n&amp;sub;	⊂\nis a proper subset of\n&amp;sube;	⊆\nis a subset or equal to\n&amp;forall;	∀\nfor all\n&amp;exist;	∃\nthere exists\n&amp;Nscr;	N\nnatural numbers\n&amp;real;	R\nreal numbers&#xa;			tex&#xa;				in canvas only:&#xa;					canvas only uses the math portion of latex(which is the same as/comes from tex) accessed through math editor($$\\sqrt{x}$$ button), inline only, dont use \\\\(...\\\\) or \\\\[...\\\\]&#xa;				combine superscript and subscript for $$x_1^2$$&#xa;					x_1^2&#xa;				create $$x_i + 1 $$ and $$x_{i+1}$$&#xa;					\\\\{x_{ij}\\\\}&#xa;				\\\\&#xa;					used for &#xa;						commands, alternative uses of special characters&#xa;							\\\\frac{numerator}{denominator}&#xa;						create $$\\{x_{ij}\\}$$&#xa;							\\\\{x_{ij}\\\\}&#xa;						create$$\\sqrt{n}$$&#xa;							\\\\sqrt{n}&#xa;						add braces to arrays&#xa;							create $$\\left\\{\n\\begin{array}{ll}\n    n/2 &amp; \\text{if n is even} \\\\\n    (-n-1) &amp; \\text{if n is odd} \\\\\n\\end{array}\n\\right.$$&#xa;								\\\\left\\\\{\n\\\\begin{array}{ll}\n    n/2 &amp; \\\\text{if n is even} \\\\\\\\\n    (-n-1) &amp; \\\\text{if n is odd} \\\\\\\\\n\\\\end{array}\n\\\\right.&#xa;				%&#xa;					used for comments&#xa;						click on the expression to view comment in editor:$$x + y = % addition is commutative$$&#xa;				division&#xa;					frac vs /&#xa;						\\\\frac{numerator}{denominator}\n&#xa;						create $$ a * b + c / (d - e)$$&#xa;							 a * b + c / (d - e)&#xa;						create$$\\frac{a * b + c}{(d - e)} $$&#xa;							\\\\frac{a*b+c}{(d-e)}&#xa;				positive, negative sign&#xa;					/p, /m&#xa;				rel ops&#xa;					LaTeX	\nRenders As	\nmeaning\nx &lt; y	x&lt;y \nless than \nx &gt; y	x&gt;y \ngreater than \nx = y	x=y \nequal to \nx \\\\neq y	x≠y \nnot equal to \nx \\\\leq y	x≤y \nless than or equal to \nx \\\\geq y	x≥y \ngreater than&#xa;						outside of canvas&#xa;							&lt; is &amp;lt;\n&gt; is &amp;gt;&#xa;								create x &lt; y, x &gt; y&#xa;									x &amp;lt; y, x &amp;gt y;&#xa;				bool ops&#xa;					LaTeX	\nRenders As	\nmeaning\nx \\\\wedge y	x∧y\nand\nx \\\\vee y	x∨y\nor\n\\\\neg x	¬x\nnot&#xa;				resizable&#xa;					summation&#xa;						create $$\\sum_i^n x_i	$$&#xa;							\\\\sum_i^n x_i &#xa;					product&#xa;						create $$\\prod_i^n x_i	$$&#xa;							\\\\prod_i^n x_i &#xa;					parentheses and brackets&#xa;						\\\\left(....\\\\right)&#xa;						\\\\left{...\\\\right}&#xa;						\\\\left[...\\\\right]&#xa;						can mix and match&#xa;							\\\\left(...\\\\right]&#xa;						create $$ \\sum_{i=0}^n (x_i + i) = \\left(\\sum_{i=0}^n x_i \\right) + \\left(\\sum_{i=0}^n i\\right) = (n \\bar{x}) + \\left(\\frac{n(n+1)}{2}\\right)  \n$$&#xa;							 \\\\sum_{i=0}^n (x_i + i) = \\\\left(\\\\sum_{i=0}^n x_i \\\\right) + \\\\left(\\\\sum_{i=0}^n i\\\\right) = (n \\\\bar{x}) + \\\\left(\\\\frac{n(n+1)}{2}\\\\right) \n&#xa;						to create a lone bracket&#xa;							replace the bracket/brace/paranthesis on one end with a &#39;.&#39;&#xa;							\\\\left(\\\\right. or \\\\left.\\\\right}&#xa;				regular text (non-comment)&#xa;					\\\\mbox&#xa;						create &#xa;					\\\\text&#xa;						create $$n/2 \\text{ if n is even}$$&#xa;							n/2 \\\\text{ if n is even}&#xa;				array&#xa;					\\\\begin{array}{numcols}\na &amp; b \\\\\\\\\nc &amp; d \\\\\\\\\n... \\\\end{array}&#xa;						to add brackets, \\\\left[ \\\\begin{array} \\\\ end{array} \\\\right], \\\\left{ \\\\begin{array} \\\\ end{array} \\\\right}, \\\\left( \\\\begin{array} \\\\ end{array} \\\\right), &#xa;						create $$\\left\\{\n\\begin{array}{ll}\n    n/2 &amp; \\text{if n is even} \\\\\n    (-n-1) &amp; \\text{if n is odd} \\\\\n\\end{array}\n\\right.$$&#xa;							\\\\left\\\\{\n\\\\begin{array}{ll}\n    n/2 &amp; \\\\text{if n is even} \\\\\\\\\n    (-n-1) &amp; \\\\text{if n is odd} \\\\\\\\\n\\\\end{array}\n\\\\right.&#xa;					elem separators: &amp;\nrow separators: \\\\\\\\&#xa;					pseudotable&#xa;						\\\\begin{array}{ } \n \\\\\\\\ &amp; &amp;\\\\text{Starting State}\n\\\\\\\\\n \\\\hline&amp; &amp; q0 &amp; q1 &amp;q2 &amp; 0 &amp; 1 &amp; 2 \\\\\\\\ \\\\hline \\\\text{Input} &amp; 0&amp;q1&amp;q2&amp;q2&amp;0&amp;2&amp;1 \\\\\\\\ \n &amp;1&amp;1&amp;q2&amp;q2&amp;1&amp;0&amp;2 \\\\\\\\ \n\\\\hline \\\\end{array} &#xa;				ellipses&#xa;					\\\\ldots\n...&#xa;					\\\\vdots $$\\vdots$$&#xa;					\\\\ddots$$\\ddots$$&#xa;					create $$ \\left[\\begin{array}{llll}\n  1      &amp; 0      &amp; \\ldots &amp; 0 \\\\\n  0      &amp; 1      &amp; \\ldots &amp; 0 \\\\\n  \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\\n  0      &amp; 0      &amp; \\ldots &amp; 1 \\\\\n\\end{array}\\right] $$&#xa;						 \\\\left[\\\\begin{array}{llll}\n  1 &amp; 0 &amp; \\\\ldots &amp; 0 \\\\\\\\\n  0 &amp; 1 &amp; \\\\ldots &amp; 0 \\\\\\\\\n  \\\\vdots &amp; \\\\vdots &amp; \\\\ddots &amp; \\\\vdots \\\\\\\\\n  0 &amp; 0 &amp; \\\\ldots &amp; 1 \\\\\\\\\n\\\\end{array}\\\\right]" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-1060" y="-900" width="560" height="1510" as="geometry" />
        </mxCell>
        <mxCell id="vgUEoPMxiy3XVfyz-lUC-7" value="set theory&#xa;	roster method&#xa;		uses braces to define a set&#xa;			ex: S  = {1,2,3,4,...}&#xa;	equivalence&#xa;		two sets that have exactly the same members&#xa;	subset&#xa;		set that contains one or more members of another set&#xa;			$$\\sub$$&#xa;		proper subset&#xa;	superset&#xa;		set that contains all the members of another set, or all the members of another set&#xa;			$$\\supset$$&#xa;		proper superset&#xa;logic&#xa;	closure&#xa;		an operation performed on a number belonging to a set of numbers will result in a number within the same set &#xa;	number systems&#xa;		real(R), \nrational, (Q,can be written as a fraction with a nonzero denominator, can have a finite number of digits or can have repeating decimals only if it repeats a finite sequence of digits [like 1.2024242424...)\nirrational, ([no symbol], cannot be written as a fraction, like pi, e, and sqrt(2), that either does not end or  end in a repeating pattern.\nnatural, (N,positive whole numbers) \nintegers (Z, positive and negative whole numbers, and zero)&#xa;			propeties of integers: set Z is closed under addition,multiiplication, and subtraction&#xa;				example of proving a set is not closed under an operation: natural numbers are not closed under subtraction, as they can result in a negative number (an integer)&#xa;			all sqrts of natural numbers are irrational, other than perfect squares&#xa;	direct proof&#xa;		demonstrates that a conditional statement&#39;s conclusion follows logically from its hypothesis. (the If part logically leads to the then part), only definitions or proven propositions can be used here&#xa;			ex: Proposition. If x and y are odd integers, then x * y is an odd integer. this is a &quot;for all&quot; proposition, meaning it cannot be proven by given examples, as we would be here all day listing every possible example of two odd numbers being multiplied together. instead we use a definition&#xa;		other tools for constructing a proof: algebra, set theory, properties&#xa;	constructing a proof of a conditional statement&#xa;		requires: that you prove that Q is true whenever P is true&#xa;			constructing direct proofs&#xa;				start by assuming P is true, and proceed through a logical sequence of steps to arrive to the conclusion that Q must also be true&#xa;				require: \nDefinitions&#xa;					definitions are precise statements used for setting up a proof&#xa;						ex, for the conditional statement &quot;If x and y are odd integers, then x * y is an odd integer.&quot; what definition could we use to define an even/odd integer?&#xa;							integer a is an even integer if there exists an integer n such that a = 2n. integer a is an odd integer if there exists an integer n such that a = 2n + 1.&#xa;								example of how a definition can be used in constructing a proof with a know show table&#xa;				other useful tool: backwards question&#xa;					backward question asks &quot;under what conditions is this proposition true or untrue?&quot;&#xa;				other useful tool: forwards question&#xa;					if the hypothesis is true, what conclusions can we draw?&#xa;	logical operators&#xa;		conjuction\ndisjunction\nnegation\nimplication(conditional)&#xa;			$$P \\wedge Q$$$$P \\vee Q$$$$\\neg Q$$$$P \\Rightarrow Q$$&#xa;				P and Q\nP or Q\nNot Q\nIf P then Q&#xa;					$$P \\wedge Q$$ is true if P AND Q are true$$P \\vee Q$$ is true if P OR Q is true$$\\neg Q$$ is true if Q is false, and false if Q is true$$P \\Rightarrow Q$$ is false only when P is true and Q is false&#xa;						both are true\nat least one is true\nopposite value of Q\nfalse if hypothesis is true and conclusion are false, otherwise true(can be true if P = false and Q =false, P = false and Q = true, P = true and Q = true)&#xa;		exclusive or &#xa;			$$P \\oplus Q$$&#xa;				true if P is true and Q is falsetrue if Q is true and P is false\nfalse if P is true and Q is true\nfalse if P is false and Q is false&#xa;		biconditional&#xa;			$$P \\leftrightarrow Q$$&#xa;				true if both A and B are false\ntrue if both A and B are true&#xa;		equivalence&#xa;			$$\\equiv$$&#xa;				when two statements, compound statements, or conditional statements have the same truth table&#xa;		logical equivalencies&#xa;			$$P \\rightarrow Q \\equiv \\neg P \\vee Q$$&#xa;				P then Q is equal to Not P  OR Q&#xa;			$$\\neg (P \\rightarrow Q) \\equiv P \\wedge \\neg Q$$&#xa;				the negation of P then Q is equal to P AND Not Q&#xa;			$$P \\rightarrow Q \\equiv \\neg Q \\rightarrow \\neg P$$&#xa;				P then Q is equal to Not Q then Not P&#xa;			$$\\neg(\\neg P) \\equiv P$$&#xa;				not not p equals p&#xa;			distributive laws&#xa;				$$P \\vee (Q \\wedge R) \\equiv (P \\vee Q) \\wedge (P \\vee R)$$&#xa;					P OR (Q and R) equals (P OR Q) AND (P OR R)&#xa;				$$P \\wedge (Q \\vee R) \\equiv (P \\wedge Q) \\vee (P \\wedge R)$$&#xa;					P AND (Q OR R) equals (P AND Q) OR (P AND R)&#xa;				left statement and left operator are distributed to both statements with in the compound statement,  and the two new compound statements are joined by the operator inside the original righthand statement&#xa;			de morgans laws&#xa;				$$\\neg{(P \\wedge Q)} \\equiv \\neg P \\vee \\neg Q$$&#xa;					the negation of P and Q is equal to Not P OR Not Q&#xa;				$$\\neg{(P \\vee Q)} \\equiv \\neg P \\wedge \\neg Q$$&#xa;					the negation of P or Q is equal to Not P AND Not Q&#xa;			$$(P \\leftrightarrow Q) \\equiv (P \\rightarrow Q) \\wedge (Q \\rightarrow P)$$&#xa;			$$P \\rightarrow (Q \\vee R) \\equiv (P \\wedge \\neg Q) \\rightarrow R$$&#xa;			$$(P \\vee Q) \\rightarrow R \\equiv (P \\rightarrow R) \\wedge (Q \\rightarrow R)$$&#xa;	statement&#xa;		sentence that is either true or false, never both&#xa;		aka proposition&#xa;		like binary, either 1 or 0, cant be both at the same time&#xa;		what is not considered a statement?&#xa;			equations with one or more variables on either side, those only become statements when a value is substituted with a variable&#xa;	compound statement&#xa;		a statement that contains an operator&#xa;	conditional statement&#xa;		statement that asserts that if one thing is true, another thing must also be true&#xa;			converse and contrapositive&#xa;				converse swaps the original hypothesis and conclusion&#xa;					$$P \\rightarrow Q$$ becomes $$Q \\rightarrow P$$&#xa;				contrapositive swaps the positions of the original hypothesis with the position of the original conclusion, and negates both of them&#xa;					$$P \\rightarrow Q$$ becomes $$\\neg Q \\rightarrow \\neg P$$&#xa;	tautology and contradiction&#xa;		tautology is a compound statement S that always yields a true value, contradiction is always false&#xa;	variable&#xa;		symbol representing an unspecified object belonging to that variable&#39;s universal set&#xa;			if a variable exists in a set, its denoted by  $$y \\in S$$\notherwise $$y \\notin S$$&#xa;		universal set for a variable&#xa;			the set of all possible values that can be substituted in for that variable&#xa;			U = {...}&#xa;	constant&#xa;		a specific member of a variable&#39;s universal set&#xa;		not the same as a constant value like  youre used to&#xa;		x + 4 where x = {1,2}&#xa;			4 is a constant value, 1 and 2 are constants" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-100" y="-1570" width="560" height="1840" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
